import os
from datetime import datetime, timedelta
from urllib.error import HTTPError
import pandas as pd

class GenerateVolitalityReport(object):
    def __init__(self):
        self.working_dates = self.get_working_dates()
        self.data, self.nify_100 = self.get_nifty100()
    
    def get_nifty100(self):
        nifty_csv = pd.read_csv('reports/CURRENT-NIFTY-100.csv')
        nifty_csv.columns = nifty_csv.columns.str.strip()
        nify_100 = [i for i in nifty_csv['SYMBOL']]
        return pd.DataFrame(nify_100, columns=['SYMBOL']), nify_100

    def get_report(self):
        dates = self.working_dates
        print(self.data)  
        for date in dates:
            try:
                url = f'https://www1.nseindia.com/archives/nsccl/volt/CMVOLT_{date}.CSV'
                v_report = pd.read_csv(url)
                filtered_data = v_report.loc[v_report['Symbol'].isin(self.nify_100)]
                report_date =  filtered_data.iloc[0]['Date']
                filtered_data = filtered_data[['Symbol','Underlying Annualised Volatility (F) = E*Sqrt(365)']]
                filtered_data = filtered_data.rename(columns={'Underlying Annualised Volatility (F) = E*Sqrt(365)': str(report_date).strip(),
                'Symbol':'SYMBOL'})
                filtered_data[f'{str(report_date).strip()}'] = filtered_data[f'{str(report_date).strip()}'].astype(float)
                self.data = pd.merge(self.data, filtered_data, on='SYMBOL')
            except HTTPError as error:
                print(f"{url} has no report")
                continue
            except IndexError as error:
                print(f"{url} has no report")
                continue
    
    def save_report(self):
        data = self.data.set_index(['SYMBOL'])
        data = data.iloc[:, pd.to_datetime(data.columns, format="%d-%b-%Y").argsort()].reset_index()
        data.index = data.index + 1
        columns = data.columns
        data['AVERAGE'] = data.drop('SYMBOL', axis=1).apply(lambda x: x.mean(), axis=1).round(3)
        data = data.sort_values(by=["AVERAGE"],  ascending=False)
        data.to_csv(f'{datetime.now().strftime("%b-%d-%Y")}-vreport.csv')
        print("Done")

    def get_working_dates(self):
        days = []
        start = datetime.now() - timedelta(19)
        end = datetime.now()
        excluded=(6, 7)
        while start.date() <= end.date():
            if start.isoweekday() not in excluded:
                days.append(start.strftime('%d%m%Y'))
            start += timedelta(days=1)
        return days

if __name__ == '__main__':
    vreport = GenerateVolitalityReport()
    vreport.get_report()
    vreport.save_report()

# print(workdays( datetime.now() - timedelta(19), datetime.now()))

# https://www1.nseindia.com/archives/nsccl/volt/CMVOLT_19012021.CSV